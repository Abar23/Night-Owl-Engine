#include "GaussianKernel.glsl"

layout (local_size_x = 1, local_size_y = 128, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform readonly image2D sourceImage;

layout(rgba32f, binding = 1) uniform writeonly image2D destinationImage;

shared vec4 v[128 + 101];

void main() {
    ivec2 size = imageSize(sourceImage);
    ivec2 gpos = ivec2(gl_GlobalInvocationID.xy);
    uint lpos = gl_LocalInvocationID.y;
    int halfWidth = 100 / 2;

    // Load pixels into shared memory
    ivec2 pixelToRead = gpos + ivec2(0, -halfWidth);
    if (pixelToRead.y < 0)
    {
        pixelToRead.y = 0;
    } 
    else if (pixelToRead.y >= size.y)
    {
        pixelToRead.y = size.y - 1;
    }

    v[lpos] = imageLoad(sourceImage, pixelToRead);
    if (lpos < 2 * halfWidth) {
        ivec2 pixelToRead = gpos + ivec2(0, 128 - halfWidth);
        if (pixelToRead.y < 0)
        {
            pixelToRead.y = 0;
        } 
        else if (pixelToRead.y >= size.y)
        {
            pixelToRead.y = size.y - 1;
        }

        v[lpos + 128] = imageLoad(sourceImage, gpos + ivec2(0, 128 - halfWidth));
    }

    // Ensure all threads have loaded their pixels before proceeding
    memoryBarrierShared();
    barrier();

    vec4 sum = vec4(0.0);

    // Compute convolution
    for (int i = -halfWidth; i <= halfWidth; ++i) 
    {    
        sum += gaussianKernel[i + halfWidth] * v[lpos + i + halfWidth];
    }

    // Write to destination image
    imageStore(destinationImage, gpos, sum);
}